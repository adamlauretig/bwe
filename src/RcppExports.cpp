// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// estimate_bwe
List estimate_bwe(arma::sp_mat mat_Y, unsigned int nJ, unsigned int nI, unsigned int nK, arma::mat xmu, arma::mat xsigma, arma::mat x_init, arma::mat betamu, arma::mat betasigma, arma::mat beta_init, bool verbose, unsigned int maxit, double thresh, unsigned int checkfreq, unsigned int threads, arma::mat p, unsigned int prop_ns, double cx_0, double dx_0, double cb_0, double db_0);
RcppExport SEXP _bwe_estimate_bwe(SEXP mat_YSEXP, SEXP nJSEXP, SEXP nISEXP, SEXP nKSEXP, SEXP xmuSEXP, SEXP xsigmaSEXP, SEXP x_initSEXP, SEXP betamuSEXP, SEXP betasigmaSEXP, SEXP beta_initSEXP, SEXP verboseSEXP, SEXP maxitSEXP, SEXP threshSEXP, SEXP checkfreqSEXP, SEXP threadsSEXP, SEXP pSEXP, SEXP prop_nsSEXP, SEXP cx_0SEXP, SEXP dx_0SEXP, SEXP cb_0SEXP, SEXP db_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type mat_Y(mat_YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nJ(nJSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nI(nISEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nK(nKSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xmu(xmuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xsigma(xsigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x_init(x_initSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betamu(betamuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betasigma(betasigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_init(beta_initSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type checkfreq(checkfreqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type prop_ns(prop_nsSEXP);
    Rcpp::traits::input_parameter< double >::type cx_0(cx_0SEXP);
    Rcpp::traits::input_parameter< double >::type dx_0(dx_0SEXP);
    Rcpp::traits::input_parameter< double >::type cb_0(cb_0SEXP);
    Rcpp::traits::input_parameter< double >::type db_0(db_0SEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_bwe(mat_Y, nJ, nI, nK, xmu, xsigma, x_init, betamu, betasigma, beta_init, verbose, maxit, thresh, checkfreq, threads, p, prop_ns, cx_0, dx_0, cb_0, db_0));
    return rcpp_result_gen;
END_RCPP
}
// estimate
RcppExport SEXP estimate(SEXP mat_Y_r, SEXP nJ_r, SEXP nI_r, SEXP nK_r, SEXP xmu_r, SEXP xsigma_r, SEXP x_init_r, SEXP betamu_r, SEXP betasigma_r, SEXP beta_init_r, SEXP verbose_r, SEXP maxit_r, SEXP thresh_r, SEXP checkfreq_r, SEXP threads_r, SEXP p_r, SEXP prop_ns_r, SEXP cx_0_r, SEXP dx_0_r, SEXP cb_0_r, SEXP db_0_r);
RcppExport SEXP _bwe_estimate(SEXP mat_Y_rSEXP, SEXP nJ_rSEXP, SEXP nI_rSEXP, SEXP nK_rSEXP, SEXP xmu_rSEXP, SEXP xsigma_rSEXP, SEXP x_init_rSEXP, SEXP betamu_rSEXP, SEXP betasigma_rSEXP, SEXP beta_init_rSEXP, SEXP verbose_rSEXP, SEXP maxit_rSEXP, SEXP thresh_rSEXP, SEXP checkfreq_rSEXP, SEXP threads_rSEXP, SEXP p_rSEXP, SEXP prop_ns_rSEXP, SEXP cx_0_rSEXP, SEXP dx_0_rSEXP, SEXP cb_0_rSEXP, SEXP db_0_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_Y_r(mat_Y_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nJ_r(nJ_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nI_r(nI_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nK_r(nK_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xmu_r(xmu_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xsigma_r(xsigma_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x_init_r(x_init_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betamu_r(betamu_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betasigma_r(betasigma_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_init_r(beta_init_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type verbose_r(verbose_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maxit_r(maxit_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type thresh_r(thresh_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type checkfreq_r(checkfreq_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type threads_r(threads_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_r(p_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type prop_ns_r(prop_ns_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cx_0_r(cx_0_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dx_0_r(dx_0_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cb_0_r(cb_0_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type db_0_r(db_0_rSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate(mat_Y_r, nJ_r, nI_r, nK_r, xmu_r, xsigma_r, x_init_r, betamu_r, betasigma_r, beta_init_r, verbose_r, maxit_r, thresh_r, checkfreq_r, threads_r, p_r, prop_ns_r, cx_0_r, dx_0_r, cb_0_r, db_0_r));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _bwe_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _bwe_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _bwe_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _bwe_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bwe_estimate_bwe", (DL_FUNC) &_bwe_estimate_bwe, 21},
    {"_bwe_estimate", (DL_FUNC) &_bwe_estimate, 21},
    {"_bwe_rcpparma_hello_world", (DL_FUNC) &_bwe_rcpparma_hello_world, 0},
    {"_bwe_rcpparma_outerproduct", (DL_FUNC) &_bwe_rcpparma_outerproduct, 1},
    {"_bwe_rcpparma_innerproduct", (DL_FUNC) &_bwe_rcpparma_innerproduct, 1},
    {"_bwe_rcpparma_bothproducts", (DL_FUNC) &_bwe_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bwe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
